Scneario1:

Pull an Image from docker hub in your docker host (local)


Name of the Image:  

 Imagename:tagname
 
eg: docker pull ubuntu:18.04

    docker pull ubuntu:20

   docker pull ubuntu


Scenario 2:

List the images in your local machine

docker images

or

docker image ls



Scneario 3:

Delete an image form local

$ docker rmi tomcat:9
22:59: ==> background mode/detached mode

-d ==> container will be created it will be up and running and user will not be on the container

container is runnign in the backgroud


Scanerio: to delete a container

 $ docker rm -f containername/containerid



  $ docker rm container id ==> remove container that are exited state

 $ docker rm -f containerid ==> remove container that are running/exitted state

  $ docker rm -f $(docker ps -aq) ==> delete all the containers



Scenario: Create a container from an docker Image NGINX and run the container in the detached mode


$ docker run --name n1 -d nginx

$ docker inspect containerid/name ==> will show details of container in JSON format

$ docker stop containerid/name ==> stop a running container

$ docker start containerid/name ==> start a exited container

Scenario: to stop and container, start a container form docker host


Scenario: Access your container from a browser


-p option or -P option

$ docker run --name web -d -p 8383:80 httpd

$ docker run --name web2 -d -P httpd 


Scenario : Saving the data of the container on the docker host - Volumes


$ docker volume ls ==> list the volumes created on the host machine

$ docker volume create myvol

$ docker volume inspect myvol

1. Save the data of your containers directory on the created volume which is on the host machine


   > run command and do volume mapping

 -v ==> volume mapping to container directory


      docker run -it -v volumename:containerdir      centos





Scneario 4:

************

Containers:

Docker ps -a ==> list all containers in the docker host

$ docker run ubuntu

 ==> create a container in exited

Create a container which is running


==> Foreground mode 

  -it : container will be created and will be running and user will be attached to the terminal of the container


comeout of container

press ctl p + ctl q ==> user will out of the container and container will up and running


exit ==>user will out of the container but container will stop


docker attach u1 ==> attache to the terminal of container again


==> background mode

-d ==> container will be created and user will not be on the container

container is runnign in the backgroud











